{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","actions.js","api/api.js","components/Header.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","error","Header","nextProps","nextState","Component","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","state","searchRobots","event","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bf374648.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","export const CHANGE_SEARCHFIELD ='CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\n","import { apiCall } from './api/api'\nimport { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\nexport const setSearchField=(text)=>({\n    type:CHANGE_SEARCHFIELD,\n    payload: text\n})\n\nexport const requestRobots=()=>(dispatch)=>{\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    apiCall('https://jsonplaceholder.typicode.com/users')\n        .then(data=> dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\n        .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","import React, {Component} from \"react\";\n\nclass Header extends Component{\n    \n    shouldComponentUpdate(nextProps, nextState){\n        return false;\n    }\n\n    render(){\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport {setSearchField, requestRobots} from '../actions';\nimport Header from '../components/Header';\n\nconst mapStateToProps =state=>{\n  return{\n    searchField: state.searchRobots.searchField,\n    robots:state.requestRobots.robots,\n    isPending:state.requestRobots.isPending,\n    error:state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps =(dispatch)=>{\n  return{\n  onSearchChange: (event)=>dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () =>dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const {searchField, onSearchChange, robots, isPending}=this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n      <Header/>\n      <SearchBox searchChange={onSearchChange}/>\n      <Scroll>\n        {isPending ?\n          <h1>Loading</h1> :\n          <CardList robots={filteredRobots} />\n        }\n      </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\";\n\nconst initialStateSearch={\n    searchField: ''\n}\n\nexport const searchRobots =(state=initialStateSearch, action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default: \n            return state\n    }\n}\n\nconst initialStateRobots={\n    robots:[],\n    isPending:false,\n    error: ''\n}\n\nexport const requestRobots=(state=initialStateRobots, action={})=>{\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending:true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state,{robots:action.payload, isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state, {error:action.payload, isPending:false})\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons'; \nimport thunkMiddleware from 'redux-thunk';\n\nconst logger=createLogger()\nconst rootReducer=combineReducers({searchRobots, requestRobots})\nconst store=createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}